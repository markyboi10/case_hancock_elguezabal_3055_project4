/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import driver.Software;
import java.awt.*;
import java.util.*;
import javax.swing.*;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.List;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import tree.DeceasedRelative;
import tree.FamilyMember;
import tree.FamilyTree;
import tree.LivingRelative;
import tree.MapPanel;

/**
 *
 * @author Mark Case
 */
public class myGUI extends javax.swing.JFrame {

    public static String[] listItems;
    public static final int MAXITEMS = 1000;

    /**
     * Creates new form myGUI
     */
    public myGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addOrRemoveBtnGrp = new javax.swing.ButtonGroup();
        mapPanelBeanInfo1 = new gui.MapPanelBeanInfo();
        mapPanelBeanInfo2 = new gui.MapPanelBeanInfo();
        mapPanelBeanInfo3 = new gui.MapPanelBeanInfo();
        mapPanelBeanInfo4 = new gui.MapPanelBeanInfo();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        menu_pnl = new javax.swing.JPanel();
        menu_lbl = new javax.swing.JLabel();
        searchClients_lbl = new javax.swing.JLabel();
        Name = new javax.swing.JTextField();
        jScrollPane_theList = new javax.swing.JScrollPane();
        theList = new javax.swing.JList<>();
        goButton = new javax.swing.JButton();
        addFamMember_lbl = new javax.swing.JLabel();
        addParentButton = new javax.swing.JButton();
        addName_lbl = new javax.swing.JLabel();
        addName_txtField = new javax.swing.JTextField();
        addDOB_lbl = new javax.swing.JLabel();
        addResidence_lbl = new javax.swing.JLabel();
        addResidence_textField = new javax.swing.JTextField();
        addDOD_lbl = new javax.swing.JLabel();
        addDOD_textField = new javax.swing.JTextField();
        parent_lbl = new javax.swing.JLabel();
        spouse_lbl = new javax.swing.JLabel();
        child_lbl = new javax.swing.JLabel();
        child_combo = new javax.swing.JComboBox<>();
        addName_lbl1 = new javax.swing.JLabel();
        addDOB_textField = new javax.swing.JTextField();
        familyTreeAddComboBox = new javax.swing.JComboBox<>();
        parent_combo = new javax.swing.JComboBox<>();
        addFamilyMember_btn1 = new javax.swing.JButton();
        addChildButton = new javax.swing.JButton();
        spouse_combo = new javax.swing.JComboBox<>();
        livingButton = new javax.swing.JRadioButton();
        deceasedButton = new javax.swing.JRadioButton();
        stateLabel = new javax.swing.JLabel();
        state_TextField = new javax.swing.JTextField();
        tool_pnl = new javax.swing.JPanel();
        tools_lbl = new javax.swing.JLabel();
        saveFamilyTree_btn = new javax.swing.JButton();
        removeFamMember_btn = new javax.swing.JButton();
        livingToDeceased = new javax.swing.JButton();
        title_pnl = new javax.swing.JPanel();
        title_lbl = new javax.swing.JLabel();
        treeIcon = new javax.swing.JLabel();
        tree_pnl = new javax.swing.JPanel();
        table_pnl = new javax.swing.JPanel();
        jScrollPane_tbl = new javax.swing.JScrollPane();
        tbl_displayInfo = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        menu_pnl.setBackground(new java.awt.Color(184, 80, 66));
        menu_pnl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        menu_lbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        menu_lbl.setForeground(new java.awt.Color(35, 35, 36));
        menu_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/menuIcon.png"))); // NOI18N
        menu_lbl.setText("Menu");

        searchClients_lbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchClients_lbl.setForeground(new java.awt.Color(35, 35, 36));
        searchClients_lbl.setText("Clientele");

        Name.setBackground(new java.awt.Color(231, 232, 209));
        Name.setForeground(new java.awt.Color(35, 35, 36));
        Name.setText("Name");
        Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                NameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                NameFocusLost(evt);
            }
        });
        Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameActionPerformed(evt);
            }
        });
        Name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NameKeyTyped(evt);
            }
        });

        theList.setBackground(new java.awt.Color(231, 232, 209));
        theList.setForeground(new java.awt.Color(35, 35, 36));
        theList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                theListMouseClicked(evt);
            }
        });
        jScrollPane_theList.setViewportView(theList);

        goButton.setText("Search");
        goButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                goButtonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                goButtonFocusLost(evt);
            }
        });
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        addFamMember_lbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addFamMember_lbl.setForeground(new java.awt.Color(35, 35, 36));
        addFamMember_lbl.setText("Add a Family Member");

        addParentButton.setBackground(new java.awt.Color(231, 232, 209));
        addParentButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addParentButton.setForeground(new java.awt.Color(35, 35, 36));
        addParentButton.setText("Add Parent");
        addParentButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addParentButtonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addParentButtonFocusLost(evt);
            }
        });
        addParentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParentButtonActionPerformed(evt);
            }
        });

        addName_lbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addName_lbl.setForeground(new java.awt.Color(35, 35, 36));
        addName_lbl.setText("Name:");

        addName_txtField.setBackground(new java.awt.Color(231, 232, 209));
        addName_txtField.setForeground(new java.awt.Color(35, 35, 36));
        addName_txtField.setText("Name");
        addName_txtField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addName_txtFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addName_txtFieldFocusLost(evt);
            }
        });
        addName_txtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addName_txtFieldActionPerformed(evt);
            }
        });

        addDOB_lbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addDOB_lbl.setForeground(new java.awt.Color(35, 35, 36));
        addDOB_lbl.setText("DOB:");

        addResidence_lbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addResidence_lbl.setForeground(new java.awt.Color(35, 35, 36));
        addResidence_lbl.setText("Residence:");

        addResidence_textField.setBackground(new java.awt.Color(231, 232, 209));
        addResidence_textField.setForeground(new java.awt.Color(35, 35, 36));
        addResidence_textField.setText("Seattle");
        addResidence_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addResidence_textFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addResidence_textFieldFocusLost(evt);
            }
        });

        addDOD_lbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addDOD_lbl.setForeground(new java.awt.Color(35, 35, 36));
        addDOD_lbl.setText("DOD:");

        addDOD_textField.setBackground(new java.awt.Color(231, 232, 209));
        addDOD_textField.setForeground(new java.awt.Color(35, 35, 36));
        addDOD_textField.setText("YYYY-mm-dd");
        addDOD_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addDOD_textFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addDOD_textFieldFocusLost(evt);
            }
        });

        parent_lbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        parent_lbl.setForeground(new java.awt.Color(35, 35, 36));
        parent_lbl.setText("Parents:");

        spouse_lbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        spouse_lbl.setForeground(new java.awt.Color(35, 35, 36));
        spouse_lbl.setText("Spouse:");

        child_lbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        child_lbl.setForeground(new java.awt.Color(35, 35, 36));
        child_lbl.setText("Children:");

        addName_lbl1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addName_lbl1.setForeground(new java.awt.Color(35, 35, 36));
        addName_lbl1.setText("Family Tree:");

        addDOB_textField.setBackground(new java.awt.Color(231, 232, 209));
        addDOB_textField.setForeground(new java.awt.Color(35, 35, 36));
        addDOB_textField.setText("01/01/2001");
        addDOB_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addDOB_textFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addDOB_textFieldFocusLost(evt);
            }
        });

        familyTreeAddComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                familyTreeAddComboBoxItemStateChanged(evt);
            }
        });
        familyTreeAddComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                familyTreeAddComboBoxActionPerformed(evt);
            }
        });

        addFamilyMember_btn1.setBackground(new java.awt.Color(231, 232, 209));
        addFamilyMember_btn1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addFamilyMember_btn1.setForeground(new java.awt.Color(35, 35, 36));
        addFamilyMember_btn1.setText("Add");
        addFamilyMember_btn1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addFamilyMember_btn1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addFamilyMember_btn1FocusLost(evt);
            }
        });
        addFamilyMember_btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFamilyMember_btn1ActionPerformed(evt);
            }
        });

        addChildButton.setBackground(new java.awt.Color(231, 232, 209));
        addChildButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addChildButton.setForeground(new java.awt.Color(35, 35, 36));
        addChildButton.setText("Add Child");
        addChildButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addChildButtonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addChildButtonFocusLost(evt);
            }
        });
        addChildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChildButtonActionPerformed(evt);
            }
        });

        livingButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        livingButton.setForeground(new java.awt.Color(35, 35, 36));
        livingButton.setText("Living");
        livingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                livingButtonActionPerformed(evt);
            }
        });

        deceasedButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deceasedButton.setForeground(new java.awt.Color(35, 35, 36));
        deceasedButton.setText("Deceased");
        deceasedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deceasedButtonActionPerformed(evt);
            }
        });

        stateLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        stateLabel.setForeground(new java.awt.Color(35, 35, 36));
        stateLabel.setText("State:");

        state_TextField.setBackground(new java.awt.Color(231, 232, 209));
        state_TextField.setForeground(new java.awt.Color(35, 35, 36));
        state_TextField.setText("WA");
        state_TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                state_TextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                state_TextFieldFocusLost(evt);
            }
        });
        state_TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                state_TextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menu_pnlLayout = new javax.swing.GroupLayout(menu_pnl);
        menu_pnl.setLayout(menu_pnlLayout);
        menu_pnlLayout.setHorizontalGroup(
            menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_pnlLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menu_pnlLayout.createSequentialGroup()
                        .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(menu_pnlLayout.createSequentialGroup()
                                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addDOD_lbl)
                                    .addComponent(addResidence_lbl)
                                    .addComponent(spouse_lbl)
                                    .addComponent(child_lbl)
                                    .addComponent(parent_lbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(child_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(parent_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addDOD_textField)
                                    .addComponent(spouse_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(menu_pnlLayout.createSequentialGroup()
                                        .addComponent(addResidence_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(stateLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(state_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 6, Short.MAX_VALUE))))
                            .addGroup(menu_pnlLayout.createSequentialGroup()
                                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane_theList, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(menu_pnlLayout.createSequentialGroup()
                                        .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(searchClients_lbl, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(goButton))
                                    .addComponent(addFamMember_lbl))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addParentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addChildButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28))
                    .addGroup(menu_pnlLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addDOB_lbl)
                            .addComponent(addName_lbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addName_txtField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addDOB_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(menu_pnlLayout.createSequentialGroup()
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menu_pnlLayout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(menu_lbl))
                    .addGroup(menu_pnlLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(addName_lbl1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(familyTreeAddComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(livingButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deceasedButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(menu_pnlLayout.createSequentialGroup()
                .addGap(215, 215, 215)
                .addComponent(addFamilyMember_btn1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        menu_pnlLayout.setVerticalGroup(
            menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menu_lbl)
                .addGap(25, 25, 25)
                .addComponent(searchClients_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane_theList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91)
                .addComponent(addFamMember_lbl)
                .addGap(2, 2, 2)
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addName_lbl1)
                    .addComponent(familyTreeAddComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(livingButton)
                    .addComponent(deceasedButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addName_lbl)
                    .addComponent(addName_txtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDOB_lbl)
                    .addComponent(addDOB_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addResidence_lbl)
                    .addComponent(addResidence_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stateLabel)
                    .addComponent(state_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDOD_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDOD_lbl))
                .addGap(8, 8, 8)
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spouse_lbl)
                    .addComponent(spouse_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parent_lbl)
                    .addComponent(addParentButton)
                    .addComponent(parent_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(menu_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(child_lbl)
                    .addComponent(child_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addChildButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addFamilyMember_btn1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tool_pnl.setBackground(new java.awt.Color(167, 190, 174));
        tool_pnl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tools_lbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        tools_lbl.setForeground(new java.awt.Color(35, 35, 36));
        tools_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/toolIcon2.png"))); // NOI18N
        tools_lbl.setText("Tools");

        saveFamilyTree_btn.setBackground(new java.awt.Color(231, 232, 209));
        saveFamilyTree_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        saveFamilyTree_btn.setForeground(new java.awt.Color(35, 35, 36));
        saveFamilyTree_btn.setText("Save Family Tree");
        saveFamilyTree_btn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                saveFamilyTree_btnFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                saveFamilyTree_btnFocusLost(evt);
            }
        });
        saveFamilyTree_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFamilyTree_btnActionPerformed(evt);
            }
        });

        removeFamMember_btn.setBackground(new java.awt.Color(231, 232, 209));
        removeFamMember_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        removeFamMember_btn.setForeground(new java.awt.Color(35, 35, 36));
        removeFamMember_btn.setText("Remove Family Member");
        removeFamMember_btn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                removeFamMember_btnFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                removeFamMember_btnFocusLost(evt);
            }
        });
        removeFamMember_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFamMember_btnActionPerformed(evt);
            }
        });

        livingToDeceased.setBackground(new java.awt.Color(231, 232, 209));
        livingToDeceased.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        livingToDeceased.setForeground(new java.awt.Color(35, 35, 36));
        livingToDeceased.setText("Convert Living to Deceased");
        livingToDeceased.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                livingToDeceasedFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                livingToDeceasedFocusLost(evt);
            }
        });
        livingToDeceased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                livingToDeceasedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tool_pnlLayout = new javax.swing.GroupLayout(tool_pnl);
        tool_pnl.setLayout(tool_pnlLayout);
        tool_pnlLayout.setHorizontalGroup(
            tool_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tool_pnlLayout.createSequentialGroup()
                .addContainerGap(97, Short.MAX_VALUE)
                .addComponent(tools_lbl)
                .addGap(90, 90, 90))
            .addGroup(tool_pnlLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(tool_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeFamMember_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                    .addComponent(saveFamilyTree_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(livingToDeceased, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        tool_pnlLayout.setVerticalGroup(
            tool_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tool_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tools_lbl)
                .addGap(27, 27, 27)
                .addComponent(removeFamMember_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveFamilyTree_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(livingToDeceased)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        title_pnl.setBackground(new java.awt.Color(184, 80, 66));
        title_pnl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        title_lbl.setBackground(new java.awt.Color(35, 35, 36));
        title_lbl.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        title_lbl.setForeground(new java.awt.Color(35, 35, 36));
        title_lbl.setText("Finn's Family Tree");

        treeIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/treeIcon.png"))); // NOI18N

        javax.swing.GroupLayout title_pnlLayout = new javax.swing.GroupLayout(title_pnl);
        title_pnl.setLayout(title_pnlLayout);
        title_pnlLayout.setHorizontalGroup(
            title_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(title_pnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(title_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, title_pnlLayout.createSequentialGroup()
                        .addComponent(treeIcon)
                        .addGap(377, 377, 377))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, title_pnlLayout.createSequentialGroup()
                        .addComponent(title_lbl)
                        .addGap(291, 291, 291))))
        );
        title_pnlLayout.setVerticalGroup(
            title_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(title_pnlLayout.createSequentialGroup()
                .addComponent(treeIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(title_lbl))
        );

        tree_pnl.setBackground(new java.awt.Color(231, 232, 209));
        tree_pnl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tree_pnl.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                tree_pnlMouseWheelMoved(evt);
            }
        });
        tree_pnl.setLayout(new java.awt.BorderLayout());

        table_pnl.setBackground(new java.awt.Color(167, 190, 174));
        table_pnl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane_tbl.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane_tbl.setToolTipText("");
        jScrollPane_tbl.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        tbl_displayInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Date of Birth", "Death of Death", "Residence", "Married to:", "Parent of:"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane_tbl.setViewportView(tbl_displayInfo);

        jPanel1.setBackground(new java.awt.Color(231, 232, 209));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(35, 35, 36));
        jLabel1.setText("Family Member Information");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(91, 91, 91))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        javax.swing.GroupLayout table_pnlLayout = new javax.swing.GroupLayout(table_pnl);
        table_pnl.setLayout(table_pnlLayout);
        table_pnlLayout.setHorizontalGroup(
            table_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(table_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane_tbl)
                .addContainerGap())
            .addGroup(table_pnlLayout.createSequentialGroup()
                .addGap(311, 311, 311)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        table_pnlLayout.setVerticalGroup(
            table_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, table_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane_tbl, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menu_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(table_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tree_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tool_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tool_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(title_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tree_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(table_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(menu_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NameKeyPressed(java.awt.event.KeyEvent evt) {                                
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {            
            if(Name.getText().trim().equals("Name" + "")) {
            JOptionPane.showMessageDialog(Name,"Please enter a first and last name");
            return;
        }
            goButton.setBackground(new Color(184,80,66)); 
        }
    }                               
  
    private void saveFamilyTree_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFamilyTree_btnActionPerformed
        // TODO add your handling code here:
        makePanelImage(tree_pnl);

    }//GEN-LAST:event_saveFamilyTree_btnActionPerformed

    private void saveFamilyTree_btnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_saveFamilyTree_btnFocusGained
        // TODO add your handling code here:
        saveFamilyTree_btn.setBackground(new Color(184, 80, 66));
    }//GEN-LAST:event_saveFamilyTree_btnFocusGained

    private void saveFamilyTree_btnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_saveFamilyTree_btnFocusLost
        // TODO add your handling code here:
        saveFamilyTree_btn.setBackground(new Color(231, 232, 209));
    }//GEN-LAST:event_saveFamilyTree_btnFocusLost

    private void removeFamMember_btnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_removeFamMember_btnFocusGained
        // TODO add your handling code here:
        removeFamMember_btn.setBackground(new Color(184, 80, 66));
    }//GEN-LAST:event_removeFamMember_btnFocusGained

    private void removeFamMember_btnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_removeFamMember_btnFocusLost
        // TODO add your handling code here:
        removeFamMember_btn.setBackground(new Color(231, 232, 209));
    }//GEN-LAST:event_removeFamMember_btnFocusLost

    private void removeFamMember_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFamMember_btnActionPerformed
        MapPanel map = Software.getMapManager().getMap();
        if(map == null) {
            JOptionPane.showMessageDialog(tree_pnl, "You need to have a family tree loaded to do this and a member selected.");
            return;
        }
        
        int option = JOptionPane.showConfirmDialog(null, "This will alter your table, do you wish to continue?", "WARNING", JOptionPane.YES_NO_OPTION);
        if(option == JOptionPane.YES_OPTION) {
            map = Software.getMapManager().getMap();
            if(map.getSelectedMember() != null) {
                map.getFamilyTree().removeFamilyMember(map.getSelectedMember().getName());
            } else {
                JOptionPane.showMessageDialog(null, "A family member must be selected for them to be removed.");
            }
            
        // Redraw the family tree
        Software.getMapManager().assignMap(map.getFamilyTree());
        
        // Save the tree
        Software.getDatabase().saveTree(map.getFamilyTree().getName());
            
            map.repaint();
        }
    }//GEN-LAST:event_removeFamMember_btnActionPerformed

    
    // ignore, to be removed
    private void tree_pnlMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_tree_pnlMouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_tree_pnlMouseWheelMoved

    private void familyTreeAddComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_familyTreeAddComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_familyTreeAddComboBoxActionPerformed

    private void addDOB_textFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addDOB_textFieldFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_addDOB_textFieldFocusLost

    private void addDOB_textFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addDOB_textFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_addDOB_textFieldFocusGained
    // end ignore
    
    
    // Focus lost/gained mthods for text fields
    private void addDOD_textFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addDOD_textFieldFocusLost
        // TODO add your handling code here:
        if (((JTextField) evt.getSource()).getText().equals("")) {
            ((JTextField) evt.getSource()).setText("YYYY-mm-dd" + "");
        }
    }//GEN-LAST:event_addDOD_textFieldFocusLost

    private void addDOD_textFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addDOD_textFieldFocusGained
        // TODO add your handling code here:
        ((JTextField) evt.getSource()).setText("");
    }//GEN-LAST:event_addDOD_textFieldFocusGained

    private void addResidence_textFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addResidence_textFieldFocusLost
        // TODO add your handling code here:
        if (((JTextField) evt.getSource()).getText().equals("")) {
            ((JTextField) evt.getSource()).setText("Seattle, WA" + "");
        }
    }//GEN-LAST:event_addResidence_textFieldFocusLost

    private void addResidence_textFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addResidence_textFieldFocusGained
        // TODO add your handling code here:
        ((JTextField) evt.getSource()).setText("");
    }//GEN-LAST:event_addResidence_textFieldFocusGained
    
    // ignore, to be removed
    private void addName_txtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addName_txtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addName_txtFieldActionPerformed
    //end ignore
    
    private void addName_txtFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addName_txtFieldFocusLost
        // TODO add your handling code here:
        if (((JTextField) evt.getSource()).getText().equals("")) {
            ((JTextField) evt.getSource()).setText("Name" + "");
        }
    }//GEN-LAST:event_addName_txtFieldFocusLost

    private void addName_txtFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addName_txtFieldFocusGained
        // TODO add your handling code here:
        ((JTextField) evt.getSource()).setText("");
    }//GEN-LAST:event_addName_txtFieldFocusGained

    private void addParentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParentButtonActionPerformed
        
        // This combo is empty, everyone was added
        if(parent_combo.getItemAt(0) == null) return;
        
        String name = parent_combo.getItemAt(parent_combo.getSelectedIndex()).trim();
        
        if(name.isEmpty() || currentParentsToAdd.contains(name)) return;
        
        // Adds the parent to the currentParentsToAdd list
        currentParentsToAdd.add(name);
    
        // Remove from all combos
        // Don't want some person being a parent and child and or spouse
        parent_combo.removeItem(name);
        child_combo.removeItem(name);
        spouse_combo.removeItem(name);
    }//GEN-LAST:event_addParentButtonActionPerformed

    private void addParentButtonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addParentButtonFocusLost
        // TODO add your handling code here:
        addParentButton.setBackground(new Color(231, 232, 209));
    }//GEN-LAST:event_addParentButtonFocusLost

    private void addParentButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addParentButtonFocusGained
        // TODO add your handling code here:
        addParentButton.setBackground(new Color(184, 80, 66));
    }//GEN-LAST:event_addParentButtonFocusGained
    
    // If empty, display pop up
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        // If text field empty, display pop up message
        if (Name.getText().trim().equals("Name" + "")) {
            JOptionPane.showMessageDialog(tree_pnl, "Please enter a first and last name");
            return;
        }
        goButton.setBackground(new Color(184, 80, 66));
    }//GEN-LAST:event_goButtonActionPerformed

    /*
    Focus Gained/Lost methods
    Changes color of goButton to
    tell user it needs to be
    reselected
     */
    private void goButtonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_goButtonFocusLost
        goButton.setBackground(new Color(187, 187, 187));
    }//GEN-LAST:event_goButtonFocusLost

    private void goButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_goButtonFocusGained
        goButton.setBackground(new Color(184, 80, 66));
    }//GEN-LAST:event_goButtonFocusGained

    // Set textfield equal to what user clicks from jList
    private void theListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_theListMouseClicked

        JList list = (JList) evt.getSource();
        
        if (evt.getClickCount() == 1) { // if clicked once

            try {
                int index = list.locationToIndex(evt.getPoint()); 
                if (list.getModel().getElementAt(index) != null && list.getModel().getElementAt(index) instanceof String) {
                    Name.setText((String) list.getModel().getElementAt(index)); //set text field equal to user click
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(tree_pnl, "Please select a valid name");
            }

        }

        // This is the list of possible family trees
        List<FamilyTree> familyTreesThatAreAPosibility = Software.getDatabase().getFamilyTreesFromClientName(Name.getText());

        // Make sure we get a family tree
        if(!familyTreesThatAreAPosibility.isEmpty()) {
            FamilyTree first = familyTreesThatAreAPosibility.get(0);

            // Displays the family tree
            Software.getMapManager().assignMap(first);

            int index = list.locationToIndex(evt.getPoint());
            FamilyMember selected = first.getByName((String) list.getModel().getElementAt(index));

            if(selected != null)
            // Re-set the client cause Derek said so.
            Software.getMapManager().getMap().setSelectedMember(selected);
        }
    }//GEN-LAST:event_theListMouseClicked

    // Show names from database on jList when typing in jTextfield
    private void NameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NameKeyTyped

        // Holds all the familymembers for this map
        Set<String> allFamilyMembers = new HashSet<String>();

        // Creates a graph of every familymember to family tree
        Map<String, List<String>> familyTreeToFamilyMembers = new HashMap<>();

        for (FamilyTree f : Software.getDatabase().getFamilyTrees().values()) {

            // Members to be added
            List<String> membersToAdd = new ArrayList<>();

            for (FamilyMember n : f.getFamilyMembers()) {
                membersToAdd.add(n.getName());
                allFamilyMembers.add(n.getName());
            }

            // Adds the members to the hashmap, familyTreeToFamilyMembers.
            familyTreeToFamilyMembers.put(f.getName(), membersToAdd);
        }

        Object[] availableFamilyMemberNames = allFamilyMembers.toArray();

        // Use a star if you want to display every client
        if (evt.getKeyChar() == '*') {
            theList.setListData(availableFamilyMemberNames);
            return;
        }

        String compareString = ("" + Name.getText() + evt.getKeyChar()); //compare entered key character
        listItems = new String[MAXITEMS];
        //Display names from databse depending on whats entered
        if (compareString.trim().length() > 0) { 
            int kounter = 0;
            for (int i = 0; i < availableFamilyMemberNames.length; i++) {
                if (kounter < MAXITEMS) {
                    if (((String) availableFamilyMemberNames[i]).length() >= compareString.length()
                        && ((String) availableFamilyMemberNames[i]).substring(0, compareString.length()).equalsIgnoreCase(compareString)) {
                        listItems[kounter] = ((String) availableFamilyMemberNames[i]);
                        kounter++;
                    }
                }
            }
        }

        theList.setListData(listItems); 
    }//GEN-LAST:event_NameKeyTyped

    /* to be deleted
    private void NameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NameKeyPressed

        //        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            //
            //            if(lastName.getText().trim().equals("Last Name" + "") && firstName.getText().trim().equals("") ) {
                //            JOptionPane.showMessageDialog(lastName,"Please enter a first and last name");
                //            return;
                //        }
            //            goButton.setBackground(new Color(184,80,66));
            //        }
    }//GEN-LAST:event_NameKeyPressed
    */
    
    // to be deleted
    private void NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameActionPerformed
    
    /*
    Focus Gained/Lost methods 
    for first/last name jTextFields
    */
    // If focus is gained, set text empty
    private void NameFocusGained(java.awt.event.FocusEvent evt) {                                 
        ((JTextField)evt.getSource()).setText(""); 
    }
     // If focus is lost with nothing entered, reset default text
    private void NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NameFocusLost
        if (((JTextField) evt.getSource()).getText().equals("")) {
            ((JTextField) evt.getSource()).setText("Name" + "");
        }
    }//GEN-LAST:event_NameFocusLost

//GEN-FIRST:event_NameFocusGained
 
//GEN-LAST:event_NameFocusGained
    
    // Current add member selected family tree
    private FamilyTree currentSelectedFamilyTree;
    
    private List<String> currentParentsToAdd = new ArrayList<String>();
    private List<String> currentChildrenToAdd = new ArrayList<String>();
    
    private void resetCurrentParentsAndChildrenToAdd() {
        currentParentsToAdd = new ArrayList<>();
        currentChildrenToAdd = new ArrayList<>();
    }
    
    private void familyTreeAddComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_familyTreeAddComboBoxItemStateChanged
        
        // Handles combobox selections
        if(evt.getSource() instanceof JComboBox) {
            
            if(((JComboBox)evt.getSource()).getName() != null) {
                
                // If this is the family tree combo box
                if(((JComboBox)evt.getSource()).getName().equalsIgnoreCase("familyTreeAddComboBox")) {
                    // Assigns the add member selected tree to the currently selected tree
                    currentSelectedFamilyTree = ((ComboBoxHolder) evt.getItem()).getTree();

                    // Clearing the current parents and children chache
                    resetCurrentParentsAndChildrenToAdd();
                    
                    // Does other boxes
                    // Loads in all the other boxes with each family members names
                    
                    // All the family members to be added
                    List<String> totalFamilyMembers = currentSelectedFamilyTree.getFamilyMembers().stream().filter(Objects::nonNull).map(n -> n.getName()).collect(Collectors.toList());
                    
                    // Removing all the current members
                    parent_combo.removeAllItems();
                    child_combo.removeAllItems();
                    spouse_combo.removeAllItems();
                    
                    // Adds in the none for spouse
                    spouse_combo.addItem("none");
                    
                    // Adds in all the family members
                    totalFamilyMembers.forEach(n -> {
                        parent_combo.addItem(n);
                        child_combo.addItem(n);
                        spouse_combo.addItem(n);
                    });
                    
                    // Updaes the gui
                    ((JComboBox)evt.getSource()).revalidate();
                }
            }
        }
        
    }//GEN-LAST:event_familyTreeAddComboBoxItemStateChanged

    // to be removed
    private void addFamilyMember_btn1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addFamilyMember_btn1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_addFamilyMember_btn1FocusGained

    private void addFamilyMember_btn1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addFamilyMember_btn1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_addFamilyMember_btn1FocusLost

    private void addFamilyMember_btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFamilyMember_btn1ActionPerformed
         
        /*
            Adding members is done here!
        */
        
        if(currentSelectedFamilyTree == null) {
            JOptionPane.showMessageDialog(tree_pnl, "You must select a family tree to add this family member into.");
            return;
        } else if (addName_txtField.getText().trim().equals("Name" + "") || addName_txtField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(tree_pnl, "Name Field Empty");
            return;
        } else if (addDOB_textField.getText().trim().equals("YYYY-mm-dd" + "") || addDOB_textField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(tree_pnl, "DOB Field Empty");
            return;
        } else if (livingButton.isSelected() && (addResidence_textField.getText().trim().equals(""))) {
            JOptionPane.showMessageDialog(tree_pnl, "Residence Field Empty");
            return;
        } else if (livingButton.isSelected() && (state_TextField.getText().trim().equals(""))) {
            JOptionPane.showMessageDialog(tree_pnl, "Residence Field Empty");
            return;
        } else if (deceasedButton.isSelected() && (addDOD_textField.getText().trim().equals("YYYY-mm-dd" + "") || addDOD_textField.getText().trim().equals(""))) {
            JOptionPane.showMessageDialog(tree_pnl, "DOD Field Empty");
            return;
        }
        
        addParentButton.setBackground(new Color(184, 80, 66));
       
        // Deal with creating a new family member here
        FamilyMember member = null;
        
        if(livingButton.isSelected()) {
            member = new LivingRelative(addName_txtField.getText().trim(), addDOB_textField.getText().trim(), new ArrayList<>(), new ArrayList<>(), null, addResidence_textField.getText(), state_TextField.getText());
        } else {
            member = new DeceasedRelative(addName_txtField.getText().trim(), addDOB_textField.getText().trim(), new ArrayList<>(), new ArrayList<>(), null, addDOD_textField.getText());
        }
        
        boolean worked = false;        
        // Assigns the new family member
        if(member != null)
            worked = currentSelectedFamilyTree.addMember(member, currentParentsToAdd, currentChildrenToAdd, spouse_combo.getItemAt(spouse_combo.getSelectedIndex()));
        
        // Reset all fields here
        // Resets the current parents to add
        resetCurrentParentsAndChildrenToAdd();
        addName_txtField.setText("");
        addDOB_textField.setText("");
        addResidence_textField.setText("");
        state_TextField.setText("");
        addDOD_textField.setText("");
        spouse_combo.removeAllItems();
        parent_combo.removeAllItems();
        child_combo.removeAllItems();

        // Redraw the family tree
        Software.getMapManager().assignMap(currentSelectedFamilyTree);
        
        // Save the tree
        Software.getDatabase().saveTree(currentSelectedFamilyTree.getName());
    }//GEN-LAST:event_addFamilyMember_btn1ActionPerformed

    // to be removed
    private void addChildButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addChildButtonFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_addChildButtonFocusGained

    private void addChildButtonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addChildButtonFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_addChildButtonFocusLost

    private void addChildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChildButtonActionPerformed
        
        
        // This combo is empty, everyone was added
        if(child_combo.getItemAt(0) == null) return;
        
        String name = child_combo.getItemAt(child_combo.getSelectedIndex()).trim();
        
        if(name.isEmpty() || currentChildrenToAdd.contains(name)) return;
        
        // Adds the parent to the currentParentsToAdd list
        currentChildrenToAdd.add(name);
    
        // Remove from all combos
        // Don't want some person being a parent and child and or spouse
        parent_combo.removeItem(name);
        child_combo.removeItem(name);
        spouse_combo.removeItem(name);
    }//GEN-LAST:event_addChildButtonActionPerformed

    private void livingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_livingButtonActionPerformed

        if (buttonGroup1.getSelection() == null) {
            return;
        }

        // Deals with the selection of living button
        addResidence_lbl.setVisible(true);
        addResidence_textField.setVisible(true);
        stateLabel.setVisible(true);
        state_TextField.setVisible(true);

        addDOD_lbl.setVisible(false);
        addDOD_textField.setVisible(false);

        // Updates the GUI

    }//GEN-LAST:event_livingButtonActionPerformed

    private void deceasedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deceasedButtonActionPerformed
        if (buttonGroup1.getSelection() == null) {
            return;
        }

        // Deals with the selection of deceased button
        addResidence_lbl.setVisible(false);
        addResidence_textField.setVisible(false);
        stateLabel.setVisible(false);
        state_TextField.setVisible(false);

        addDOD_lbl.setVisible(true);
        addDOD_textField.setVisible(true);
    }//GEN-LAST:event_deceasedButtonActionPerformed

    // to be removed
    private void state_TextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_state_TextFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_state_TextFieldFocusGained

    private void state_TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_state_TextFieldFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_state_TextFieldFocusLost

    private void state_TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_state_TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_state_TextFieldActionPerformed

    private void livingToDeceasedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_livingToDeceasedFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_livingToDeceasedFocusGained

    private void livingToDeceasedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_livingToDeceasedFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_livingToDeceasedFocusLost

    private void livingToDeceasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_livingToDeceasedActionPerformed
        
        MapPanel map = Software.getMapManager().getMap();
        
        if(map == null || map.getSelectedMember() == null) {
            JOptionPane.showMessageDialog(tree_pnl, "You need to have a family tree loaded to do this and a member selected.");
            return;
        }
        
        FamilyMember member = map.getSelectedMember();
        
        if(member instanceof DeceasedRelative) {
            JOptionPane.showMessageDialog(tree_pnl, "This member is already deceased.");
            return;
        }
        
        String deathDate = JOptionPane.showInputDialog(tree_pnl, "Please enter the death date of this family member");
        DeceasedRelative relative = null;
        if(deathDate == null || deathDate.equals("")) {
            JOptionPane.showMessageDialog(null, "No name entered. Cancelling operation.");
            return;
        }
        else
            relative = ((LivingRelative)member).convertLivingToDeceased(deathDate);
        
        // Updates the Map's Family Tree with relative
        map.getFamilyTree().updateFamilyMembersSate(relative);
        
        // Shows the converted message
        int option2 = JOptionPane.showConfirmDialog(tree_pnl, relative.getName() + " has been converted to deceased with the date of %s.".formatted(deathDate), "WARNING", JOptionPane.OK_OPTION);
        if(option2 == JOptionPane.YES_OPTION) {
        }
        //JOptionPane.showMessageDialog(tree_pnl, relative.getName() + " has been converted to deceased with the date of %s.".formatted(deathDate));
    }//GEN-LAST:event_livingToDeceasedActionPerformed

    // when window opens, animate text
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        final int MAX_X = 560;
        final int MIN_X = 50;
        
        Thread animation = new Thread(new Runnable() {
           public void run(){
               int x = 100;
               int y =30;
              
                       
               boolean checked = true;
               while(true) {
                   if(checked) {
                  title_lbl.setLocation(x, y);
                  x +=10;
                   } else {
                         title_lbl.setLocation(x, y);

                          x -= 10;
                          }
                   if(x>MAX_X) {
                       checked = false;
                       x = 520;
                   }
                   if(x<MIN_X) {
                       checked = true;
                   }
                  try{
                      Thread.sleep(200);
                  }catch(Exception e){
                      
                  }
               }
           } 
        });
        animation.start();
    }//GEN-LAST:event_formWindowOpened

    /*
    @Mark
    */
    // Prints contents of a panel to file locatiion of users choice    
    public void makePanelImage(Component panel) {
        Dimension size = panel.getSize();
        BufferedImage image = new BufferedImage(
                size.width, size.height,
                BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = image.createGraphics();
        panel.paint(g2);

        JFileChooser getFile = new JFileChooser();

        getFile.setCurrentDirectory(new File(System.getProperty("user.home")));

        // Filter files
        FileNameExtensionFilter filter1 = new FileNameExtensionFilter("*.Images", "jpg", "png");

        getFile.addChoosableFileFilter(filter1);

        int res = getFile.showSaveDialog(null);

        if (res == JFileChooser.APPROVE_OPTION) {

            File selFile1 = getFile.getSelectedFile();

            String path1 = selFile1.getAbsolutePath();
            try {
                ImageIO.write(image, "png", selFile1); // with extension filter, jpg and .images work too
                System.out.println("Panel saved as Image.");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Displays a persons information into the {@code tbl_displayInfo} table
     *
     * @param data Lines to be added.
     * @param empty If the field should be empty
     */
    public void updateSelectedInformation(String[] data, boolean empty) {

        // Remove all rows
        if (tbl_displayInfo.getRowCount() > 0) {
            ((DefaultTableModel) tbl_displayInfo.getModel()).removeRow(0);
        }

        if (!empty) {
            ((DefaultTableModel) tbl_displayInfo.getModel()).addRow(data);
        }

        revalidate();
    }

    /**
     * Updates the main panel in the middle to be a new tree panel Called when a
     * client selects a family tree
     *
     * Added by Alex
     *
     * @param treePanel The JPanel to be set to the middle
     * @param oldPanel The old JPanel
     * @param name Name of the new tree panel to update the title
     */
    public void displayTreePanel(JPanel treePanel, JPanel oldPanel, String name) {

        // Removes whatever is there now
        if(oldPanel != null) {
            Set<Component> toRemove = new HashSet<>();
            for(Component n : tree_pnl.getComponents()) {
                toRemove.add(n);
            }
            
            toRemove.forEach(n -> tree_pnl.remove(n));
            
            // Removes oldPanel
            tree_pnl.remove(oldPanel);
        }
                
        // Adds the panel in
        tree_pnl.setOpaque(true);
        tree_pnl.add(treePanel, BorderLayout.CENTER);

        // Adds scrollbars to the mapPanel
        JScrollPane scrollPane = new JScrollPane(treePanel);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setBounds(50, 30, 300, 50);
        tree_pnl.add(scrollPane);

        // Assigns the new header
        updateTitleLable(name);
        
        revalidate();
    }
    
    /**
     * Adds in all the current family trees to the {@code addFamilyMemberTreeComboBox}
     * 
     * @param familyTrees List of the family trees to be added to the box
     */
    public void setUpAddTreesComboBox(HashMap<String, FamilyTree> familyTrees) {
        
        // Assigns living and deceased button names
        livingButton.setName("livingButton");
        deceasedButton.setName("deceasedButton");
        
        // Assigns living as the default button
        livingButton.setSelected(true);
        
        // Assigns the button group for the living and deceased buttons
        buttonGroup1.add(livingButton);
        buttonGroup1.add(deceasedButton);
        
        // Clears the selection
        buttonGroup1.clearSelection();
        
        // Assigns the name of this variable
        familyTreeAddComboBox.setName("familyTreeAddComboBox");
        
        for(String name : familyTrees.keySet()) {
            FamilyTree tree = familyTrees.get(name);
            
            // If the tree doesn't exist
            if(tree == null) return;
            
            // Adds the item to the combo box
            familyTreeAddComboBox.addItem(new ComboBoxHolder(name, tree));
        }
    }
    
    private final String template = "%s's Family Tree";
    
    public void updateTitleLable(String famileTreeName) {
        title_lbl.setText(template.replace("%s", famileTreeName));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Name;
    private javax.swing.JButton addChildButton;
    private javax.swing.JLabel addDOB_lbl;
    private javax.swing.JTextField addDOB_textField;
    private javax.swing.JLabel addDOD_lbl;
    private javax.swing.JTextField addDOD_textField;
    private javax.swing.JLabel addFamMember_lbl;
    private javax.swing.JButton addFamilyMember_btn1;
    private javax.swing.JLabel addName_lbl;
    private javax.swing.JLabel addName_lbl1;
    private javax.swing.JTextField addName_txtField;
    private javax.swing.ButtonGroup addOrRemoveBtnGrp;
    private javax.swing.JButton addParentButton;
    private javax.swing.JLabel addResidence_lbl;
    private javax.swing.JTextField addResidence_textField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> child_combo;
    private javax.swing.JLabel child_lbl;
    private javax.swing.JRadioButton deceasedButton;
    private javax.swing.JComboBox<ComboBoxHolder> familyTreeAddComboBox;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane_tbl;
    private javax.swing.JScrollPane jScrollPane_theList;
    private javax.swing.JRadioButton livingButton;
    private javax.swing.JButton livingToDeceased;
    private gui.MapPanelBeanInfo mapPanelBeanInfo1;
    private gui.MapPanelBeanInfo mapPanelBeanInfo2;
    private gui.MapPanelBeanInfo mapPanelBeanInfo3;
    private gui.MapPanelBeanInfo mapPanelBeanInfo4;
    private javax.swing.JLabel menu_lbl;
    private javax.swing.JPanel menu_pnl;
    private javax.swing.JComboBox<String> parent_combo;
    private javax.swing.JLabel parent_lbl;
    private javax.swing.JButton removeFamMember_btn;
    private javax.swing.JButton saveFamilyTree_btn;
    private javax.swing.JLabel searchClients_lbl;
    private javax.swing.JComboBox<String> spouse_combo;
    private javax.swing.JLabel spouse_lbl;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField state_TextField;
    private javax.swing.JPanel table_pnl;
    private javax.swing.JTable tbl_displayInfo;
    private javax.swing.JList<Object> theList;
    private javax.swing.JLabel title_lbl;
    private javax.swing.JPanel title_pnl;
    private javax.swing.JPanel tool_pnl;
    private javax.swing.JLabel tools_lbl;
    private javax.swing.JLabel treeIcon;
    private javax.swing.JPanel tree_pnl;
    // End of variables declaration//GEN-END:variables
} // End GUI

// Used for storing combobox data
class ComboBoxHolder {
    
    private String name;
    private FamilyTree tree;
    
    public ComboBoxHolder(String name, FamilyTree tree) {
        this.name = name;
        this.tree = tree;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @return the tree
     */
    public FamilyTree getTree() {
        return tree;
    }
    
    /**
     * Gets the toString.
     * 
     * @return 
     */
    @Override
    public String toString() {
        return this.name;
    }
}
